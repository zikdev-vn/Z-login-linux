import os
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from concurrent.futures import ThreadPoolExecutor
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import NoSuchElementException, ElementNotInteractableException
from src.chromeoptions_auto.chrome_options_auto import chromeoptions_auto


# ƒê∆∞·ªùng d·∫´n ChromeDriver
chrome_driver_path = r"/home/zik/Documents/auto/chromedriver"

# File ch·ª©a danh s√°ch profile v√† Gmail
profile_file = "data/profiles.txt"
gmail_file = "data/gmail.txt"

def get_profiles():
    """ƒê·ªçc danh s√°ch profile t·ª´ file"""
    if not os.path.exists(profile_file):
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file profiles.txt! H√£y t·∫°o profile tr∆∞·ªõc.")
        return []

    with open(profile_file, "r", encoding="utf-8") as f:
        profiles = [line.strip() for line in f if line.strip()]

    if not profiles:
        print("‚ö†Ô∏è Kh√¥ng c√≥ profile n√†o ƒë·ªÉ m·ªü!")
        return []

    return profiles

def get_gmails():
    """ƒê·ªçc danh s√°ch Gmail t·ª´ file"""
    if not os.path.exists(gmail_file):
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {gmail_file}! H√£y t·∫°o Gmail tr∆∞·ªõc.")
        return []

    with open(gmail_file, "r", encoding="utf-8") as f:
        gmails = [line.strip() for line in f if line.strip()]

    if not gmails:
        print("‚ö†Ô∏è Kh√¥ng c√≥ Gmail n√†o trong file!")
        return []

    return gmails


def login_gmail(driver, gmail):
    """ƒêƒÉng nh·∫≠p Gmail v·ªõi t√†i kho·∫£n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
    driver.get("https://workspace.google.com/intl/vi/gmail/")
    time.sleep(5)

    # N√∫t ƒëƒÉng nh·∫≠p
    try:
        login_button = driver.find_element(By.XPATH, '//*[@id="root"]/div[1]/header/div/div[5]/a[2]/span')
        login_button.click()
        time.sleep(5)

        # Nh·∫≠p Gmail
        email_input = driver.find_element(By.XPATH, '//*[@id="identifierId"]')
        email_input.send_keys(gmail)
        print(f"‚úÖ ƒê√£ nh·∫≠p email: {gmail}")
        email_input.send_keys(Keys.ENTER)
        time.sleep(5)
        # element nhap password
        password_input = driver.find_element(By.XPATH, '//*[@id="password"]/div[1]/div/div[1]/input')
        password_input.send_keys("Thao2004")
        password_input.send_keys(Keys.ENTER)
        time.sleep(5)
        print("‚úÖ ƒê√£ nh·∫≠p m·∫≠t kh·∫©u")
        try:
            element_exit = driver.find_element(By.XPATH, '//*[@id="yDmH0d"]/c-wiz[2]/div/div/div/div/div[2]/button[1]/div[1]')

            if element_exit.is_displayed():
                element_exit.click()
                print("‚úÖ chuyen tiep")
            else:
                print("‚ùå Khong chuyen tiep")
        except NoSuchElementException:
            print("‚ùå Khong chuyen tiep")


    except NoSuchElementException:
        print("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t ƒëƒÉng nh·∫≠p!")
    

def open_single_profile(profile, gmail):
    """M·ªü m·ªôt tr√¨nh duy·ªát v·ªõi profile v√† ƒëƒÉng nh·∫≠p Gmail"""
    try:
        print(f"\nüöÄ M·ªü profile: {profile} v·ªõi Gmail: {gmail}")

        chrome_options = chromeoptions_auto()
        chrome_options.add_argument(f"--user-data-dir={profile}")  # M·ªü Chrome v·ªõi profile ri√™ng

        service = Service(chrome_driver_path)
        driver = webdriver.Chrome(service=service, options=chrome_options)

        login_gmail(driver, gmail)  # ƒêƒÉng nh·∫≠p Gmail

        input(f"Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng tr√¨nh duy·ªát {profile}...")
        driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát sau khi ho√†n t·∫•t

    except Exception as e:
        print(f"‚ùå L·ªói khi m·ªü profile {profile}: {e}")

# H√†m ch·∫°y nhi·ªÅu profile song song
def open_profiles_with_gmails():
    """M·ªü t·∫•t c·∫£ profile v·ªõi Gmail t∆∞∆°ng ·ª©ng (ƒëa lu·ªìng)"""
    profiles = get_profiles()
    gmails = get_gmails()

    if not profiles or not gmails:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü tr√¨nh duy·ªát v√¨ thi·∫øu profile ho·∫∑c Gmail!")
        return

    num_profiles = min(len(profiles), len(gmails))  # Ch·∫°y theo s·ªë l∆∞·ª£ng nh·ªè h∆°n gi·ªØa profiles v√† gmails
    print(f"üöÄ ƒêang m·ªü {num_profiles} profile c√πng l√∫c...\n")

    with ThreadPoolExecutor(max_workers=num_profiles) as executor:
        for i in range(num_profiles):
            executor.submit(open_single_profile, profiles[i], gmails[i])

    print("‚úÖ ƒê√£ kh·ªüi ch·∫°y xong t·∫•t c·∫£ tr√¨nh duy·ªát!")


def main_gmail():
    print("Ch·ªçn thao t√°c:")
    print("1. M·ªü profile Gmail")
    print("2. Tho√°t")
    
    choice = input("Nh·∫≠p l·ª±a ch·ªçn: ").strip()
    if choice == "1":
        open_profiles_with_gmails()
    elif choice == "2":
        print("Tho√°t ch∆∞∆°ng tr√¨nh!")
        exit()

if __name__ == "__main__":
    main_gmail()
