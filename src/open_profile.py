import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from chromeoptions_auto.chrome_options_auto import chromeoptions_auto,chrome_option_webgl
from concurrent.futures import ThreadPoolExecutor
from autoweb.gmail import gmail
from autoweb.createmetamask import create_metamask
from autoweb.cygnus import cygnus
from login_gmail import open_profiles_with_gmails
import time
chrome_path = r"/opt/google/chrome/chrome"
#from auto_diskpay import arrange_windows

chrome_driver_path = r"/home/zik/Documents/auto/chromedriver"
profile_file = "profiles.txt"

def open_profiles():
    if not os.path.exists(profile_file):
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file profiles.txt! H√£y t·∫°o profile tr∆∞·ªõc.")
        return

    # ƒê·ªçc danh s√°ch profile t·ª´ file
    with open(profile_file, "r") as f:
        profiles = [line.strip() for line in f.readlines()]

    if not profiles:
        print("‚ö†Ô∏è Kh√¥ng c√≥ profile n√†o ƒë·ªÉ m·ªü!")
        return

    # Hi·ªÉn th·ªã danh s√°ch profile
    print("\nüìÇ Danh s√°ch profile c√≥ s·∫µn:")
    for idx, profile in enumerate(profiles, start=1):
        print(f"{idx}. {profile}")
    print("999. üî• M·ªü t·∫•t c·∫£ profiles")

    drivers = []  # Danh s√°ch driver ƒëang ch·∫°y

    # Cho ph√©p m·ªü nhi·ªÅu profile li√™n ti·∫øp
    while True:
        try:
            choice = int(input("\nüîπ Nh·∫≠p s·ªë profile mu·ªën m·ªü (0 ƒë·ªÉ tho√°t, 999 ƒë·ªÉ m·ªü t·∫•t c·∫£): "))

            if choice == 0:
                print("‚ùå ƒê√≥ng t·∫•t c·∫£ tr√¨nh duy·ªát...")
                for driver in drivers:
                    driver.quit()
                break  # Tho√°t kh·ªèi v√≤ng l·∫∑p

            elif choice == 999:
                print("\nüöÄ ƒêang m·ªü t·∫•t c·∫£ profiles...")
                open_multiple_profiles(profiles, drivers)
            
            elif 1 <= choice <= len(profiles):
                selected_profile = profiles[choice - 1]
                driver = open_single_profile(selected_profile)
                drivers.append(driver)  # L∆∞u l·∫°i driver ƒëang ch·∫°y

            else:
                print("‚ö†Ô∏è S·ªë kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.")

        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë!")


def open_single_profile(profile_path):
    """M·ªü m·ªôt tr√¨nh duy·ªát v·ªõi profile c·ª• th·ªÉ v√† tr·∫£ v·ªÅ driver"""
    print(f"\nüöÄ ƒêang m·ªü tr√¨nh duy·ªát v·ªõi profile: {profile_path}")
    chrome_options = chromeoptions_auto()
    chrome_options.add_argument(f"--user-data-dir={profile_path}")

    #mo chrome path
    chrome_options.binary_location = chrome_path

    service = Service(chrome_driver_path)

    driver = webdriver.Chrome(service=service, options=chrome_options)

    driver.get('https://abrahamjuliot.github.io/creepjs/')
    time.sleep(5)
    
    
    return driver  # Tr·∫£ v·ªÅ driver ƒë·ªÉ c√≥ th·ªÉ ƒë√≥ng sau n√†y

def open_multiple_profiles(profiles, drivers):
    """M·ªü t·∫•t c·∫£ c√°c tr√¨nh duy·ªát v·ªõi danh s√°ch profile song song"""
    # S·ª≠ d·ª•ng ThreadPoolExecutor ƒë·ªÉ m·ªü c√°c profile ƒë·ªìng th·ªùi
    with ThreadPoolExecutor() as executor:
        futures = []
        for profile in profiles:
            
            chrome_options = chromeoptions_auto()  # Kh·ªüi t·∫°o chrome_options
            chrome_options.add_argument(f"--user-data-dir={profile}")  # Th√™m t√πy ch·ªçn cho profile
            chrome_options.binary_location = chrome_path
            # T·∫°o futures cho m·ªói profile v·ªõi chrome_options ƒë∆∞·ª£c truy·ªÅn v√†o
            futures.append(executor.submit(open_single_profile_with_options, profile, chrome_options))

        # Ch·ªù c√°c thread ho√†n t·∫•t v√† thu k·∫øt qu·∫£
        for future in futures:
            driver = future.result()  # Ch·ªù v√† l·∫•y k·∫øt qu·∫£ t·ª´ t·ª´ng lu·ªìng
            drivers.append(driver)

def open_single_profile_with_options(profile_path, chrome_options):
    """M·ªü m·ªôt tr√¨nh duy·ªát v·ªõi profile c·ª• th·ªÉ v√† tr·∫£ v·ªÅ driver, s·ª≠ d·ª•ng chrome_options ƒë√£ thi·∫øt l·∫≠p"""
    print(f"\nüöÄ ƒêang m·ªü tr√¨nh duy·ªát v·ªõi profile: {profile_path}")
    
    service = Service(chrome_driver_path)
    try:
        chrome_options = chromeoptions_auto()
        chrome_options.binary_location = chrome_path
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        
        cygnus(driver)
        time.sleep(5)
        # Gi·∫£ s·ª≠ ƒë√¢y l√† m·ªôt h√†m th·ª±c hi·ªán h√†nh ƒë·ªông g√¨ ƒë√≥ tr√™n driver
        
        return driver  # Tr·∫£ v·ªÅ driver sau khi m·ªü tr√¨nh duy·ªát th√†nh c√¥ng
    except Exception as e:
        print(f"‚ùå L·ªói khi m·ªü profile {profile_path}: {e}")
        return None  # Tr·∫£ v·ªÅ None n·∫øu c√≥ l·ªói x·∫£y ra

    return driver 
if __name__ == "__main__":
    open_profiles()