import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from src.chromeoptions_auto.chrome_options_auto import chromeoptions_auto
from concurrent.futures import ThreadPoolExecutor
from script_auto.gmail import gmail
from script_auto.createmetamask import create_metamask
from script_auto.cygnus import cygnus
#from login_gmail import open_profiles_with_gmails
import time
chrome_path = r"/opt/google/chrome/chrome"
#from auto_diskpay import arrange_windows

chrome_driver_path = r"/home/zik/Documents/auto/chromedriver"
profile_file = "data/profiles.txt"

def open_profiles():
    
    if not os.path.exists(profile_file):
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file profiles.txt! H√£y t·∫°o profile tr∆∞·ªõc.")
        return

    # ƒê·ªçc danh s√°ch profile t·ª´ file
    with open(profile_file, "r") as f:
        profiles = [line.strip() for line in f.readlines()]

    if not profiles:
        print("‚ö†Ô∏è Kh√¥ng c√≥ profile n√†o ƒë·ªÉ m·ªü!")
        return

    # Hi·ªÉn th·ªã danh s√°ch profile
    print("\nüìÇ Danh s√°ch profile c√≥ s·∫µn:")
    for idx, profile in enumerate(profiles, start=1):
        print(f"{idx}. {profile}")
    print("999. üî• M·ªü t·∫•t c·∫£ profiles")

    drivers = []  # Danh s√°ch driver ƒëang ch·∫°y

    # Cho ph√©p m·ªü nhi·ªÅu profile li√™n ti·∫øp
    while True:
        try:
            choice = int(input("\nüîπ Nh·∫≠p s·ªë profile mu·ªën m·ªü (0 ƒë·ªÉ tho√°t, 999 ƒë·ªÉ m·ªü t·∫•t c·∫£): "))

            if choice == 0:
                print("‚ùå ƒê√≥ng t·∫•t c·∫£ tr√¨nh duy·ªát...")
                for driver in drivers:
                    driver.quit()
                break  # Tho√°t kh·ªèi v√≤ng l·∫∑p

            elif choice == 999:
                print("\nüöÄ ƒêang m·ªü t·∫•t c·∫£ profiles...")
                open_multiple_profiles(profiles, drivers)
            
            elif 1 <= choice <= len(profiles):
                selected_profile = profiles[choice - 1]
                driver = open_single_profile(selected_profile)
                drivers.append(driver)  # L∆∞u l·∫°i driver ƒëang ch·∫°y

            else:
                print("‚ö†Ô∏è S·ªë kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i.")

        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë!")


def open_single_profile(profile_path):
    
    """M·ªü m·ªôt tr√¨nh duy·ªát v·ªõi profile c·ª• th·ªÉ v√† tr·∫£ v·ªÅ driver"""
    
    print(f"\nüöÄ ƒêang m·ªü tr√¨nh duy·ªát v·ªõi profile: {profile_path}")
    chrome_options = chromeoptions_auto()
    chrome_options.add_argument(f"--user-data-dir={profile_path}")

    #mo chrome path
    chrome_options.binary_location = chrome_path

    service = Service(chrome_driver_path)

    driver = webdriver.Chrome(service=service, options=chrome_options)

    driver.get('https://abrahamjuliot.github.io/creepjs/')
    time.sleep(5)
    
    
    return driver  # Tr·∫£ v·ªÅ driver ƒë·ªÉ c√≥ th·ªÉ ƒë√≥ng sau n√†y

def open_multiple_profiles(profiles, drivers, start_port=9222, port_file="ports.txt"):
    
    """M·ªü t·∫•t c·∫£ c√°c tr√¨nh duy·ªát v·ªõi danh s√°ch profile song song"""
    
    with ThreadPoolExecutor() as executor, open(port_file, "w") as f:
        futures = []
        for i, profile in enumerate(profiles):
            port = start_port + i  # M·ªói profile c√≥ m·ªôt c·ªïng ri√™ng
            chrome_options = chromeoptions_auto()
            chrome_options.add_argument(f"--user-data-dir={profile}")
            chrome_options.add_argument(f"--remote-debugging-port={port}")  # Th√™m remote port
            chrome_options.binary_location = chrome_path
            
            futures.append(executor.submit(open_single_profile_with_options, profile, chrome_options, port, f))

        for future in futures:
            driver = future.result()
            if driver:
                drivers.append(driver)

def open_single_profile_with_options(profile_path, chrome_options, port, file):

    """M·ªü m·ªôt tr√¨nh duy·ªát v·ªõi profile c·ª• th·ªÉ v√† tr·∫£ v·ªÅ driver, s·ª≠ d·ª•ng chrome_options ƒë√£ thi·∫øt l·∫≠p"""
    
    print(f"\nüöÄ ƒêang m·ªü tr√¨nh duy·ªát v·ªõi profile: {profile_path} tr√™n c·ªïng {port}")
    file.write(f"Profile: {profile_path}, Port: {port}\n")  # Ghi th√¥ng tin v√†o file
    
    service = Service(chrome_driver_path)
    try:
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        cygnus(driver)  # G·ªçi h√†m x·ª≠ l√Ω ri√™ng n·∫øu c·∫ßn
        time.sleep(5)
        
        return driver
    except Exception as e:
        print(f"‚ùå L·ªói khi m·ªü profile {profile_path}: {e}")
        return None

if __name__ == "__main__":
    open_profiles()
    